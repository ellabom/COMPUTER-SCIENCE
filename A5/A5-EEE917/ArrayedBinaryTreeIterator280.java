//EMMANUELLA EYO	eee917	11291003	CMPT 280

package lib280.tree;

import lib280.base.LinearIterator280;
import lib280.exception.AfterTheEnd280Exception;
import lib280.exception.ContainerEmpty280Exception;
import lib280.exception.NoCurrentItem280Exception;

public class ArrayedBinaryTreeIterator280<I> extends ArrayedBinaryTreePosition280<I> implements LinearIterator280<I> {

	// This is a reference to the tree that created this iterator object.
	ArrayedBinaryTree280<I> tree;
	
	// An integer that represents the cursor position is inherited from
	// ArrayedBinaryTreePosition280.
	
	/**
	 * Create a new iterator from a given heap.
	 * @param t The heap for which to create a new iterator.
	 */
	public ArrayedBinaryTreeIterator280(ArrayedBinaryTree280<I> t) {
		super(t.currentNode);
		this.tree = t;
	}

	// TODO - Complete the following methods which are required by LinearIterator280<I>
	// Note that these method stubs were automatically generated by IntelliJ and every one of them
	// requires your attention.


	/**
	 * Check ig the cursor is located in the before position
	 * @return true, if the cursor is located in the before position, otherwise false
	 */
	@Override
	public boolean before() {return this.currentNode == 0;}

	/**
	 * Check if the cursor is located in the after position
	 * @return true, if the cursor is in the after position, otherwise false
	 */
	@Override
	public boolean after() { return this.currentNode > tree.count || tree.isEmpty();}

	/**
	 * Move cursor to the next position
	 * @throws AfterTheEnd280Exception if cursor is in the after position
	 */
	@Override
	public void goForth() throws AfterTheEnd280Exception {
		if (this.after()){
			throw new AfterTheEnd280Exception("Cannot advance the cursor in the after position");}
		this.currentNode ++;
	}

	/**
	 * Move the cursor to the firsy position
	 * @precond !after()
	 * @throws ContainerEmpty280Exception
	 */
	@Override
	public void goFirst() throws ContainerEmpty280Exception {
		if(this.after()){
			throw new ContainerEmpty280Exception("Cannot move in an empty list");
		}
		else{this.currentNode = 1;}
	}

	/**
	 *  Move the cursor to the before position
	 */
	@Override
	public void goBefore() {this.currentNode = 0;}

	/**
	 * Move the cursor to the after position
	 */
	@Override
	public void goAfter() {
		if (this.after()) {
			this.currentNode = 0;
		} else {
			this.currentNode = tree.count + 1;
		}
	}

	/**
	 *
	 * @return item I at the current position
	 * @precond tree.itemExists
	 * @throws NoCurrentItem280Exception
	 */
	@Override
	public I item() throws NoCurrentItem280Exception {
		if(!itemExists()) throw new NoCurrentItem280Exception();
		else
			return tree.items[currentNode];
	}

	/**
	 * Check if item exists
	 * @return true, if item exits, otherwise false
	 */
	@Override
	public boolean itemExists() {

		return tree.count > 0 && (this.currentNode > 0 && this.currentNode <= tree.count);
	}


}
